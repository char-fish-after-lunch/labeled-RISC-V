# Generated by script
from ctypes import *

class Dmstatus_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('version', c_uint, 4),
        ('confstrptrvalid', c_uint, 1),
        ('hasresethaltreq', c_uint, 1),
        ('authbusy', c_uint, 1),
        ('authenticated', c_uint, 1),
        ('anyhalted', c_uint, 1),
        ('allhalted', c_uint, 1),
        ('anyrunning', c_uint, 1),
        ('allrunning', c_uint, 1),
        ('anyunavail', c_uint, 1),
        ('allunavail', c_uint, 1),
        ('anynonexistent', c_uint, 1),
        ('allnonexistent', c_uint, 1),
        ('anyresumeack', c_uint, 1),
        ('allresumeack', c_uint, 1),
        ('anyhavereset', c_uint, 1),
        ('allhavereset', c_uint, 1),
        ('', c_uint, 2),
        ('impebreak', c_uint, 1),
        ('', c_uint, 9),
    ]

class Dmstatus(Union):
    addr = 0x11
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Dmstatus_S), ("bits", c_uint)]

dmstatus = Dmstatus()

class Dmcontrol_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('dmactive', c_uint, 1),
        ('ndmreset', c_uint, 1),
        ('clrresethaltreq', c_uint, 1),
        ('setresethaltreq', c_uint, 1),
        ('', c_uint, 2),
        ('hartselhi', c_uint, 10),
        ('hartsello', c_uint, 10),
        ('hasel', c_uint, 1),
        ('', c_uint, 1),
        ('ackhavereset', c_uint, 1),
        ('hartreset', c_uint, 1),
        ('resumereq', c_uint, 1),
        ('haltreq', c_uint, 1),
    ]

class Dmcontrol(Union):
    addr = 0x10
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Dmcontrol_S), ("bits", c_uint)]

dmcontrol = Dmcontrol()

class Hartinfo_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('dataaddr', c_uint, 12),
        ('datasize', c_uint, 4),
        ('dataaccess', c_uint, 1),
        ('', c_uint, 3),
        ('nscratch', c_uint, 4),
        ('', c_uint, 8),
    ]

class Hartinfo(Union):
    addr = 0x12
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Hartinfo_S), ("bits", c_uint)]

hartinfo = Hartinfo()

class Hawindowsel_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('hawindowsel', c_uint, 15),
        ('', c_uint, 17),
    ]

class Hawindowsel(Union):
    addr = 0x14
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Hawindowsel_S), ("bits", c_uint)]

hawindowsel = Hawindowsel()

class Hawindow_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('maskdata', c_uint, 32),
    ]

class Hawindow(Union):
    addr = 0x15
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Hawindow_S), ("bits", c_uint)]

hawindow = Hawindow()

class Abstractcs_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('datacount', c_uint, 4),
        ('', c_uint, 4),
        ('cmderr', c_uint, 3),
        ('', c_uint, 1),
        ('busy', c_uint, 1),
        ('', c_uint, 11),
        ('progbufsize', c_uint, 5),
        ('', c_uint, 3),
    ]

class Abstractcs(Union):
    addr = 0x16
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Abstractcs_S), ("bits", c_uint)]

abstractcs = Abstractcs()

class Command_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('control', c_uint, 24),
        ('cmdtype', c_uint, 8),
    ]

class Command(Union):
    addr = 0x17
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Command_S), ("bits", c_uint)]

command = Command()

class Abstractauto_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('autoexecdata', c_uint, 12),
        ('', c_uint, 4),
        ('autoexecprogbuf', c_uint, 16),
    ]

class Abstractauto(Union):
    addr = 0x18
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Abstractauto_S), ("bits", c_uint)]

abstractauto = Abstractauto()

class Confstrptr0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('addr', c_uint, 32),
    ]

class Confstrptr0(Union):
    addr = 0x19
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Confstrptr0_S), ("bits", c_uint)]

confstrptr0 = Confstrptr0()

class Confstrptr1_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
    ]

class Confstrptr1(Union):
    addr = 0x1a
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Confstrptr1_S), ("bits", c_uint)]

confstrptr1 = Confstrptr1()

class Confstrptr2_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
    ]

class Confstrptr2(Union):
    addr = 0x1b
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Confstrptr2_S), ("bits", c_uint)]

confstrptr2 = Confstrptr2()

class Confstrptr3_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
    ]

class Confstrptr3(Union):
    addr = 0x1c
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Confstrptr3_S), ("bits", c_uint)]

confstrptr3 = Confstrptr3()

class Nextdm_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('addr', c_uint, 32),
    ]

class Nextdm(Union):
    addr = 0x1d
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Nextdm_S), ("bits", c_uint)]

nextdm = Nextdm()

class Data0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Data0(Union):
    addr = 0x04
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Data0_S), ("bits", c_uint)]

data0 = Data0()

class Data11_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
    ]

class Data11(Union):
    addr = 0x0f
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Data11_S), ("bits", c_uint)]

data11 = Data11()

class Progbuf0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Progbuf0(Union):
    addr = 0x20
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Progbuf0_S), ("bits", c_uint)]

progbuf0 = Progbuf0()

class Progbuf15_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
    ]

class Progbuf15(Union):
    addr = 0x2f
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Progbuf15_S), ("bits", c_uint)]

progbuf15 = Progbuf15()

class Authdata_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Authdata(Union):
    addr = 0x30
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Authdata_S), ("bits", c_uint)]

authdata = Authdata()

class Haltsum0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('haltsum0', c_uint, 32),
    ]

class Haltsum0(Union):
    addr = 0x40
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Haltsum0_S), ("bits", c_uint)]

haltsum0 = Haltsum0()

class Haltsum1_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('haltsum1', c_uint, 32),
    ]

class Haltsum1(Union):
    addr = 0x13
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Haltsum1_S), ("bits", c_uint)]

haltsum1 = Haltsum1()

class Haltsum2_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('haltsum2', c_uint, 32),
    ]

class Haltsum2(Union):
    addr = 0x34
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Haltsum2_S), ("bits", c_uint)]

haltsum2 = Haltsum2()

class Haltsum3_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('haltsum3', c_uint, 32),
    ]

class Haltsum3(Union):
    addr = 0x35
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Haltsum3_S), ("bits", c_uint)]

haltsum3 = Haltsum3()

class Sbcs_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('sbaccess8', c_uint, 1),
        ('sbaccess16', c_uint, 1),
        ('sbaccess32', c_uint, 1),
        ('sbaccess64', c_uint, 1),
        ('sbaccess128', c_uint, 1),
        ('sbasize', c_uint, 7),
        ('sberror', c_uint, 3),
        ('sbreadondata', c_uint, 1),
        ('sbautoincrement', c_uint, 1),
        ('sbaccess', c_uint, 3),
        ('sbreadonaddr', c_uint, 1),
        ('sbbusy', c_uint, 1),
        ('sbbusyerror', c_uint, 1),
        ('', c_uint, 6),
        ('sbversion', c_uint, 3),
    ]

class Sbcs(Union):
    addr = 0x38
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbcs_S), ("bits", c_uint)]

sbcs = Sbcs()

class Sbaddress0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('address', c_uint, 32),
    ]

class Sbaddress0(Union):
    addr = 0x39
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbaddress0_S), ("bits", c_uint)]

sbaddress0 = Sbaddress0()

class Sbaddress1_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('address', c_uint, 32),
    ]

class Sbaddress1(Union):
    addr = 0x3a
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbaddress1_S), ("bits", c_uint)]

sbaddress1 = Sbaddress1()

class Sbaddress2_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('address', c_uint, 32),
    ]

class Sbaddress2(Union):
    addr = 0x3b
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbaddress2_S), ("bits", c_uint)]

sbaddress2 = Sbaddress2()

class Sbaddress3_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('address', c_uint, 32),
    ]

class Sbaddress3(Union):
    addr = 0x37
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbaddress3_S), ("bits", c_uint)]

sbaddress3 = Sbaddress3()

class Sbdata0_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Sbdata0(Union):
    addr = 0x3c
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbdata0_S), ("bits", c_uint)]

sbdata0 = Sbdata0()

class Sbdata1_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Sbdata1(Union):
    addr = 0x3d
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbdata1_S), ("bits", c_uint)]

sbdata1 = Sbdata1()

class Sbdata2_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Sbdata2(Union):
    addr = 0x3e
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbdata2_S), ("bits", c_uint)]

sbdata2 = Sbdata2()

class Sbdata3_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('data', c_uint, 32),
    ]

class Sbdata3(Union):
    addr = 0x3f
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Sbdata3_S), ("bits", c_uint)]

sbdata3 = Sbdata3()

class Ar_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('regno', c_uint, 16),
        ('write', c_uint, 1),
        ('transfer', c_uint, 1),
        ('postexec', c_uint, 1),
        ('aarpostincrement', c_uint, 1),
        ('aarsize', c_uint, 3),
        ('', c_uint, 1),
        ('cmdtype', c_uint, 8),
    ]

class Ar(Union):
    addr = None
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Ar_S), ("bits", c_uint)]

ar = Ar()

class Qa_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('', c_uint, 24),
        ('cmdtype', c_uint, 8),
    ]

class Qa(Union):
    addr = None
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Qa_S), ("bits", c_uint)]

qa = Qa()

class Am_S(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [
        ('', c_uint, 14),
        ('target-specific', c_uint, 2),
        ('write', c_uint, 1),
        ('', c_uint, 2),
        ('aampostincrement', c_uint, 1),
        ('aamsize', c_uint, 3),
        ('aamvirtual', c_uint, 1),
        ('cmdtype', c_uint, 8),
    ]

class Am(Union):
    addr = None
    _anonymous_ = ("reg",)
    _fields_ = [("reg", Am_S), ("bits", c_uint)]

am = Am()

